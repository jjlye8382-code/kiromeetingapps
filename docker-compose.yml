version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: meeting_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend Services
  api-gateway:
    build:
      context: .
      dockerfile: ./infrastructure/docker/api-gateway/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/meeting_platform
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/api-gateway:/app
      - /app/node_modules
    command: npm run dev

  recording-service:
    build:
      context: .
      dockerfile: ./infrastructure/docker/recording-service/Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/meeting_platform
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/recording-service:/app
      - /app/node_modules
    command: npm run dev

  transcription-service:
    build:
      context: .
      dockerfile: ./infrastructure/docker/transcription-service/Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/meeting_platform
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/transcription-service:/app
      - /app/node_modules
    command: npm run dev

  analysis-service:
    build:
      context: .
      dockerfile: ./infrastructure/docker/analysis-service/Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/meeting_platform
      - REDIS_URL=redis://redis:6379
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/analysis-service:/app
      - /app/node_modules
    command: npm run dev

  action-items-service:
    build:
      context: .
      dockerfile: ./infrastructure/docker/action-items-service/Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/meeting_platform
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/action-items-service:/app
      - /app/node_modules
    command: npm run dev

  collaboration-service:
    build:
      context: .
      dockerfile: ./infrastructure/docker/collaboration-service/Dockerfile
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - PORT=3005
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/meeting_platform
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/collaboration-service:/app
      - /app/node_modules
    command: npm run dev

  integration-service:
    build:
      context: .
      dockerfile: ./infrastructure/docker/integration-service/Dockerfile
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=development
      - PORT=3006
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/meeting_platform
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/integration-service:/app
      - /app/node_modules
    command: npm run dev

  notification-service:
    build:
      context: .
      dockerfile: ./infrastructure/docker/notification-service/Dockerfile
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=development
      - PORT=3007
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/meeting_platform
      - REDIS_URL=redis://redis:6379
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/notification-service:/app
      - /app/node_modules
    command: npm run dev

  analytics-service:
    build:
      context: .
      dockerfile: ./infrastructure/docker/analytics-service/Dockerfile
    ports:
      - "3008:3008"
    environment:
      - NODE_ENV=development
      - PORT=3008
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/meeting_platform
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./apps/analytics-service:/app
      - /app/node_modules
    command: npm run dev

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: ./infrastructure/docker/frontend/Dockerfile
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3000
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    command: npm run dev

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data: